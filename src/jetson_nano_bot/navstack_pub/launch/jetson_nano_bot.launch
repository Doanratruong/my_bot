<launch>
   <!-- Static Transforms: Setting Up the Relationships Between Coordinate Frames -->
   <node pkg="tf" type="static_transform_publisher" name="odom_broadcaster" args="0 0 0 0 0 0 odom base_footprint 30" />
	<node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0 0 0 0 base_footprint base_link 30" />
	<node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0 0 0 0 0 0 base_link laser 30" />
<!--	<node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />-->
   <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
   <include file="$(find rplidar_ros)/launch/rplidar.launch" />
   <!-- Wheel Encoder Tick Publisher and Base Controller Using Arduino --> 
   <!-- motor_controller_diff_drive_2.ino is the Arduino sketch -->
   <!-- Subscribe: /cmd_vel -->
   <!-- Publish: /right_ticks, /left_ticks -->
   <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
      <param name="port" value="/dev/ttyUSB0"/>
      <param name="baud" value="57600"/>
   </node>

   <!-- Wheel Odometry Publisher -->
   <!-- Subscribe: /right_ticks, /left_ticks, /initial_2d -->
   <!-- Publish: /odom -->
   <node pkg="localization_data_pub" type="ekf_odom_pub" name="ekf_odom_pub" output="screen">
      <param name="publish_rate" value="10.0"/>
      <param name="publish_tf" value="true"/>
      <param name="linear_scale_positive" value="1.0"/>
      <param name="linear_scale_negative" value="1.0"/>
      <param name="angular_scale_positive" value="1.0"/>
      <param name="angular_scale_negative" value="1.0"/>
   </node>

   <!-- Extended Kalman Filter from robot_pose_ekf Node -->
   <!-- Subscribe: /odom -->
   <!-- Publish: /robot_pose_ekf/odom_combined -->
   <remap from="odom" to="odom_data_quat"/>
 
   <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
      <param name="output_frame" value="odom_combined"/>
      <param name="base_footprint_frame" value="base_footprint"/>
      <param name="freq" value="50.0"/>
      <param name="sensor_timeout" value="1.0"/>
      <param name="odom_used" value="true"/>
      <param name="imu_used" value="false"/>
      <param name="vo_used" value="false"/>
      <param name="gps_used" value="false"/>
      <param name="debug" value="false"/>
      <param name="self_diagnose" value="false"/>
   </node>

   <!-- Initial Pose and Goal Publisher -->
	<!-- Publish: /initialpose, /move_base_simple/goal -->
	<node pkg="rviz" type="rviz" name="rviz">
	</node> 

   <!-- Subscribe: /initialpose, /move_base_simple/goal -->
	<!-- Publish: /initial_2d, /goal_2d -->
   <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
   </node>
   <!-- <include file="$(find rplidar_ros)/launch/rplidar.launch" /> -->
   <!-- Lidar Data Publisher Using RPLIDAR from Slamtec -->
   <!-- Used for obstacle avoidance and can be used for mapping --> 
   <!-- Publish: /scan -->
   

   <!-- Map File -->
   <arg name="map_file" default="$(find navstack_pub)/maps/book_room.yaml"/>
	
   <!-- Map Server -->
   <!-- Publish: /map, /map_metadata -->
   <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />

   <!-- Add AMCL example for differential drive robots for Localization -->
   <!-- Subscribe: /scan, /tf, /initialpose, /map -->
   <!-- Publish: /amcl_pose, /particlecloud, /tf -->
   <!-- <include file="$(find amcl)/examples/amcl_diff.launch"/> -->
  <!-- Launch AMCL for localization -->
  <node pkg="amcl" type="amcl" name="amcl" output="screen">
    <param name="odom_frame_id" value="odom"/>
    <param name="base_frame_id" value="base_link"/>
    <param name="global_frame_id" value="map"/>
    <param name="scan_topic" value="scan"/>
    <param name="min_particles" value="500"/>
    <param name="max_particles" value="2000"/>
    <param name="kld_err" value="0.05"/>
    <param name="kld_z" value="0.99"/>
    <param name="update_min_d" value="0.2"/>
    <param name="update_min_a" value="0.5"/>
    <param name="resample_interval" value="1"/>
    <param name="transform_tolerance" value="0.1"/>
  </node>

   <!-- Move Base Node -->
	<!-- Subscribe: /move_base_simple/goal -->
	<!-- Publish: /cmd_vel -->
	<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
	      <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
	      <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
	      <rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
	      <rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
	      <rosparam file="$(find navstack_pub)/param/base_local_planner_params.yaml" command="load" />
	</node>
   <!-- Static Transform between map and odom frames (if not provided by another localization system) -->

</launch>
